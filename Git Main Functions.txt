#Review your work

$ git log [-n count]
List commit history of current branch. -n count limits list to last n 
commits.
$ git log --oneline --graph --decorate
An overview with reference labels and history graph. One commit 
per line.
$ git log ref..
List commits that are present on the current branch and not merged 
into ref. A ref can be a branch name or a tag name.
$ git log ..ref
List commit that are present on ref and not merged into current 
branch.
$ git reflog 
List operations (e.g. checkouts or commits) made on local repositor

Git branching model
$ git branch [-a]
List all local branches in repository. With -a: show all branches 
(with remote).
$ git branch [branch_name]
Create new branch, referencing the current HEAD.
$ git checkout [-b][branch_name]
Switch working directory to the specified branch. With -b: Git will 
create the specified branch if it does not exist.
$ git merge [from name]
Join specified [from name] branch into your current branch (the one 
you are on currently).
$ git branch -d [name]
Remove selected branch, if it is already merged into any other. 
-D instead of -d forces deletion

#Tagging Known commits

$ git tag
List all tags.
$ git tag [name] [commit sha]
Create a tag reference named name for current commit. Add commit
sha to tag a specific commit instead of current one.
$ git tag -a [name] [commit sha]
Create a tag object named name for current commit.
$ git tag -d [name]
Remove a tag from local repository.

#Reverting changes

$ git reset [--hard] [target reference]
Switches the current branch to the target reference, leaving 
a difference as an uncommitted change. When --hard is used, 
all changes are discarded.
$ git revert [commit sha]
Create a new commit, reverting changes from the specified commit. 
It generates an inversion of changes